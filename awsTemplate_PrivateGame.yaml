AWSTemplateFormatVersion: '2010-09-09'

Description: awsTutorial(Private Game part)
Parameters:
  ResourceNamePrefix:
    Description: Prefix of resource name
    Default: awstutorial
    Type: String
  CognitoUserPool:
    Description: Cognito User Pool id of the cognito user pool client which provide
      authentication for graphql api
    Type: String
  CognitoUserPoolArn:
    Description: Cognito User Pool id of the cognito user pool client which provide
      authentication for graphql api
    Type: String
  CognitoUserPoolClient:
    Description: Cognito User Pool client id of the cognito user pool client which
      provide authentication for graphql api
    Type: String
  GameLiftFleetId:
    Description: GameLift Fleet Id of the GameLift Fleet which is ued to create private game session
    Type: String
  GameLiftAliasId:
    Description: GameLift Alias Id of the GameLift Alias which is ued to create private game session 
    Type: String
  GameLiftGameSessionMaxPlayerNum:
    Description: Max player number of the private game
    Type: Number
    Default: 20
  GameLiftGameSessionQueueName:
    Description: Game Session Queue Name of the GameLift queue which is used to create regular game session
    Type: String
  WSMMOHost:
    Description: host of websocket based MMO system
    Type: String
    Default: ""
Resources:
  awsTutorialPrivateGameLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _PrivateGame_Lambda_Function_Role
      Description: Role for AWS Lambda Functions GameLift Private Game
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Join
            - ''
            - - !Ref ResourceNamePrefix
              - _PrivateGame_Lambda_Function_Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: PrivateGameLambdaFunctionPolicy
                Effect: Allow
                Action:
                  - gamelift:CreateGameSession
                  - gamelift:CreatePlayerSession
                  - gamelift:DescribeGameSessions
                  - gamelift:SearchGameSessions
                  - gamelift:CreatePlayerSession
                  - gamelift:StartGameSessionPlacement
                Resource:
                  - '*'
      Tags:
        - Key: Usage
          Value: Youtube Streamer
  awsTutorialCreateRegularGameLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - ''
        -   - !Ref ResourceNamePrefix
            - _CreateRegularGame_Lambda
      Description: Lambda function Create private game
      Architectures:
        - arm64
      Code:
        ZipFile: |
          import os
          import boto3
          import uuid
          
          def lambda_handler(event, context):
            gameSessionQueueName = os.environ['GAME_SESSION_QUEUE_NAME']
            maxPlayerNum = os.environ['MAX_PLAYER_NUM']
            wsMmoHost = os.environ['WSMMOHOST']
            gamelift = boto3.client('gamelift')
            try:
              uuid4 = str(uuid.uuid4())
              request_parameters = {
                'PlacementId': uuid4,
                'GameSessionQueueName': gameSessionQueueName,
                'MaximumPlayerSessionCount': int(maxPlayerNum),
                'GameSessionName': uuid4,
                'DesiredPlayerSessions': [{
                  'PlayerId': event['username']
                }]
              }
              
              if 'playerData' in event and len(event['playerData']) > 0:
                request_parameters['DesiredPlayerSessions'][0]['PlayerData'] = event['playerData']
              
              if 'gameData' in event and len(event['gameData']) > 0:
                request_parameters['GameSessionData'] = event['gameData']
          
              if wsMmoHost:
                request_parameters['GameProperties'] = [{
                  'Key': 'WSMMOHost',
                  'Value': wsMmoHost
                }]
          
              if 'latencies' in event and len(event['latencies']) > 0:
                request_parameters['PlayerLatencies'] = [{
                  'PlayerId': event['username'],
                  'RegionIdentifier': latency['regionIdentifier'],
                  'LatencyInMilliseconds': latency['latencyInMilliseconds']
                } for latency in event['latencies']]
          
              response = gamelift.start_game_session_placement(**request_parameters)
          
              output = {
                'placementId': response['GameSessionPlacement']['PlacementId'] if 'GameSessionPlacement' in response else ''
              }
              
              return output
            except Exception as e:
              raise Exception(f"Error processing create regular game request: {str(e)}")
      Environment:
        Variables:
          GAME_SESSION_QUEUE_NAME: !Ref GameLiftGameSessionQueueName
          MAX_PLAYER_NUM: !Ref GameLiftGameSessionMaxPlayerNum
          WSMMOHOST: !Ref WSMMOHost
      Handler: index.lambda_handler
      # LoggingConfig:
      #   LogFormat: Text
      MemorySize: 256
      Role: !GetAtt awsTutorialPrivateGameLambdaFunctionRole.Arn
      Runtime: python3.12
      Timeout: 30
      Tags:
        - Key: Usage
          Value: Youtube Streamer
  awsTutorialCreatePrivateGameLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _CreatePrivateGame_Lambda
      Description: Lambda function Create private game
      Architectures:
        - arm64
      Code:
        ZipFile: |
          import os
          import boto3
          import string
          import random
          import datetime
          import uuid
          
          def generate_random_password(length=8):
            characters = string.ascii_uppercase + string.digits  # Uppercase letters and digits
            return ''.join(random.choices(characters, k=length))
          
          def lambda_handler(event, context):
            aliasId = os.environ['ALIAS_ID']
            maxPlayerNum = os.environ['MAX_PLAYER_NUM']
            wsMmoHost = os.environ['WSMMOHOST']
            gamelift = boto3.client('gamelift')
            try:
              while True:
                password = generate_random_password()
                # generate a uuid to prevent duplicated password
                uuid4 = str(uuid.uuid4())
                request_parameters = {
                  'AliasId': aliasId,
                  'MaximumPlayerSessionCount': int(maxPlayerNum),
                  'Name': uuid4,
                  'GameProperties': [
                    {
                      'Key': 'Password',
                      'Value': password
                    },
                    {
                      'Key': 'CreatorId',
                      'Value': event['username']
                    }
                  ],
                  'CreatorId': event['username'],
                  'IdempotencyToken': password
                }
          
                if 'gameData' in event and len(event['gameData']) > 0:
                  request_parameters['GameSessionData'] = event['gameData']
          
                if wsMmoHost:
                  request_parameters['GameProperties'].append({
                    'Key': 'WSMMOHost',
                    'Value': wsMmoHost
                  })
                  
                response = gamelift.create_game_session(**request_parameters)

                if 'GameSession' in response:
                  if response['GameSession']['Name'] == uuid4:
                    output = {
                      'password': password,
                      'gameSessionId': response['GameSession']['GameSessionId'],
                      'status': response['GameSession']['Status']
                    }
                    break

              if response['GameSession']['Status'] in ['TERMINATED', 'TERMINATING', 'ERROR']:
                raise Exception(f"Failed to create private game: {response['GameSession']['StatusReason']}")
              
              while output['status'] == 'ACTIVATING':
                request_parameters = {
                  'GameSessionId': output['gameSessionId'],
                  'Limit': 1
                }
                response = gamelift.describe_game_sessions(**request_parameters)

                if 'GameSessions' in response and len(response['GameSessions']) == 1:
                  output['status'] = response['GameSessions'][0]['Status']

                if response['GameSessions'][0]['Status'] in ['TERMINATED', 'TERMINATING', 'ERROR']:
                  raise Exception(f"Failed to create private game: {response['GameSession']['StatusReason']}")
                
              request_parameters = {
                'GameSessionId': output['gameSessionId'],
                'PlayerId': event['username']
              }
              if 'playerData' in event and len(event['playerData']) > 0:
                request_parameters['PlayerData'] = event['playerData']
          
              response = gamelift.create_player_session(**request_parameters)

              if 'PlayerSession' in response:
                output.update({
                  'playerSessionId': response['PlayerSession']['PlayerSessionId'],
                  'playerId': response['PlayerSession']['PlayerId'],
                  'status': response['PlayerSession']['Status'],
                  'ipAddress': response['PlayerSession']['IpAddress'],
                  'dnsName': response['PlayerSession']['DnsName'],
                  'port': response['PlayerSession']['Port'],
                  'playerData': response['PlayerSession']['PlayerData']
                })
              return output
            except Exception as e:
              raise Exception(f"Error processing create private game request: {str(e)}")
      Environment:
        Variables:
          ALIAS_ID: !Ref GameLiftAliasId
          MAX_PLAYER_NUM: !Ref GameLiftGameSessionMaxPlayerNum
          WSMMOHOST: !Ref WSMMOHost
      Handler: index.lambda_handler
      # LoggingConfig:
      #   LogFormat: Text
      MemorySize: 256
      Role: !GetAtt awsTutorialPrivateGameLambdaFunctionRole.Arn
      Runtime: python3.12
      Timeout: 30
      Tags:
        - Key: Usage
          Value: Youtube Streamer
  awsTutorialJoinPrivateGameLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _JoinPrivateGame_Lambda
      Description: Lambda function Join private game
      Architectures:
        - arm64
      Code:
        ZipFile: |
          import os
          import boto3
          import re
          
          def lambda_handler(event, context):
            fleetId = os.environ['FLEET_ID']
            aliasId = os.environ['ALIAS_ID']
            region = os.environ['REGION']
            gamelift = boto3.client('gamelift')
            password_pattern = re.compile("^[A-Z0-9]{8}$")
            if not password_pattern.match(event.get('password', '')):
              raise Exception(f"password should be 8-digit")

            try:
              request_parameters = {
                'AliasId': aliasId,
                'FilterExpression': 'gameSessionId = \'arn:aws:gamelift:' + region + '::gamesession/' + fleetId + '/' + event['password'] + '\'',
                'SortExpression': 'creationTimeMillis DESC',
                'Limit': 1
              }
              response = gamelift.search_game_sessions(**request_parameters)

              if 'GameSessions' not in response or len(response['GameSessions']) == 0:
                raise Exception(f"The private game doesn't exist")

              game_session_id = response['GameSessions'][0]['GameSessionId']
              game_session_status = response['GameSessions'][0]['Status']
              
              if game_session_status in ['TERMINATED', 'TERMINATING', 'ERROR']:
                raise Exception(f"The private game is terminated or failed: {response['GameSession']['StatusReason']}")
              
              while game_session_status == 'ACTIVATING':
                request_parameters = {
                  'GameSessionId': game_session_id,
                  'Limit': 1
                }
                response = gamelift.describe_game_sessions(**request_parameters)

                if 'GameSessions' in response and len(response['GameSessions']) == 1:
                  game_session_status = response['GameSessions'][0]['Status']

                if game_session_status in ['TERMINATED', 'TERMINATING', 'ERROR']:
                  raise Exception(f"The private game is terminated or failed: {response['GameSession']['StatusReason']}")

              request_parameters = {
                'GameSessionId': game_session_id,
                'PlayerId': event['username']
              }
              if 'playerData' in event and len(event['playerData']) > 0:
                request_parameters['PlayerData'] = event['playerData']
          
              response = gamelift.create_player_session(**request_parameters)

              if 'PlayerSession' in response:
                output = {
                  'playerSessionId': response['PlayerSession']['PlayerSessionId'],
                  'playerId': response['PlayerSession']['PlayerId'],
                  'status': response['PlayerSession']['Status'],
                  'ipAddress': response['PlayerSession']['IpAddress'],
                  'dnsName': response['PlayerSession']['DnsName'],
                  'port': response['PlayerSession']['Port'],
                  'playerData': response['PlayerSession']['PlayerData'],
                }
                return output
              return {}
            except Exception as e:
              raise Exception(f"Error processing join private game request: {str(e)}")
      Environment:
        Variables:
          FLEET_ID: !Ref GameLiftFleetId
          ALIAS_ID: !Ref GameLiftAliasId
          REGION: !Ref AWS::Region
      Handler: index.lambda_handler
      # LoggingConfig:
      #   LogFormat: Text
      MemorySize: 256
      Role: !GetAtt awsTutorialPrivateGameLambdaFunctionRole.Arn
      Runtime: python3.12
      Timeout: 30
      Tags:
        - Key: Usage
          Value: Youtube Streamer
  awsTutorialPrivateGameGraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - PrivateGame_GraphQL_API
      ApiType: GRAPHQL
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      IntrospectionConfig: ENABLED
      UserPoolConfig:
        AppIdClientRegex: !Ref CognitoUserPoolClient
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW
        UserPoolId: !Ref CognitoUserPool
      Tags:
        - Key: Usage
          Value: Youtube Streamer
      Visibility: GLOBAL
  awsTutorialPrivateGameLambdaFunctionDataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _PrivateGame_DataSource_Role
      Description: Role for AWS Graphql Api Private Game Data Source
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Join
            - ''
            - - !Ref ResourceNamePrefix
              - _PrivateGame_DataSource_Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: PrivateGameDataSourcePolicy
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt awsTutorialCreateRegularGameLambdaFunction.Arn
                  - !GetAtt awsTutorialCreatePrivateGameLambdaFunction.Arn
                  - !GetAtt awsTutorialJoinPrivateGameLambdaFunction.Arn
      Tags:
        - Key: Usage
          Value: Youtube Streamer
  awsTutorialCreateRegularGameDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _CreateRegularGame_DataSource
      ApiId: !GetAtt awsTutorialPrivateGameGraphQLApi.ApiId
      Description: Data source for create regular game
      LambdaConfig:
        LambdaFunctionArn: !GetAtt awsTutorialCreateRegularGameLambdaFunction.Arn
      ServiceRoleArn: !GetAtt awsTutorialPrivateGameLambdaFunctionDataSourceRole.Arn
      Type: AWS_LAMBDA
  awsTutorialCreatePrivateGameDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _CreatePrivateGame_DataSource
      ApiId: !GetAtt awsTutorialPrivateGameGraphQLApi.ApiId
      Description: Data source for create private game
      LambdaConfig:
        LambdaFunctionArn: !GetAtt awsTutorialCreatePrivateGameLambdaFunction.Arn
      ServiceRoleArn: !GetAtt awsTutorialPrivateGameLambdaFunctionDataSourceRole.Arn
      Type: AWS_LAMBDA
  awsTutorialJoinPrivateGameDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _JoinPrivateGame_DataSource
      ApiId: !GetAtt awsTutorialPrivateGameGraphQLApi.ApiId
      Description: Data source for create private game
      LambdaConfig:
        LambdaFunctionArn: !GetAtt awsTutorialJoinPrivateGameLambdaFunction.Arn
      ServiceRoleArn: !GetAtt awsTutorialPrivateGameLambdaFunctionDataSourceRole.Arn
      Type: AWS_LAMBDA
  awsTutorialPrivateGameGraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt awsTutorialPrivateGameGraphQLApi.ApiId
      Definition: |
        schema @aws_cognito_user_pools {
          query: Query
          mutation: Mutation
          subscription: Subscription
        }
        input Latency {
          regionIdentifier: String!
          latencyInMilliseconds: Float!
        }
        type CreateRegularGameResult @aws_cognito_user_pools {
          placementId: String!
        }
        type CreatePrivateGameResult @aws_cognito_user_pools {
          password: String!
          gameSessionId: String!
          playerSessionId: String!
          playerId: String!
          status: String!
          ipAddress: String!
          dnsName: String!
          port: Int!
          playerData: String!
        }
        type JoinPrivateGameResult @aws_cognito_user_pools {
          playerSessionId: String!
          playerId: String!
          status: String!
          ipAddress: String!
          dnsName: String!
          port: Int!
          playerData: String!
        }
        type Query @aws_cognito_user_pools {
        }
        type Mutation @aws_cognito_user_pools {
          CreateRegularGame(gameData: String, latencies: [Latency], playerData: String): CreateRegularGameResult
          CreatePrivateGame(gameData: String, playerData: String): CreatePrivateGameResult
          JoinPrivateGame(password: String!, playerData: String): JoinPrivateGameResult
        }
        type Subscription @aws_cognito_user_pools {
        }
  awsTutorialPrivateGameGraphQLMutationCreateRegularGameResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt awsTutorialPrivateGameGraphQLApi.ApiId
      DataSourceName: !GetAtt awsTutorialCreateRegularGameDataSource.Name
      FieldName: CreateRegularGame
      Kind: UNIT
      RequestMappingTemplate: |
        ## [Start] Set default values. **
        #set( $createdAt = $util.time.nowEpochSeconds() )
        #set( $updatedAt = $util.time.nowEpochSeconds() )
        ## [End] Set default values. **
        ## [Start] Determine request authentication mode **
        #if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) && !$util.isNull($ctx.identity.defaultAuthStrategy) )
          #set( $authMode = "userPools" )
        #end
        ## [End] Determine request authentication mode **
        ## [Start] Check authMode and execute owner/group checks **
        #if( $authMode == "userPools" )
          ## No Static Group Authorization Rules **
          ## No Dynamic Group Authorization Rules **
          ## [Start] Owner Authorization Checks **
          #set( $isOwnerAuthorized = false )
          ## Authorization rule: { allow: owner, ownerField: None, identityClaim: "cognito:username" } **
          #set( $allowedOwners0 = $util.defaultIfNull(null, null) )
          #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get("username"), $util.defaultIfNull($ctx.identity.claims.get("cognito:username"), "___xamznone____")) )
          #if( $util.isString($allowedOwners0) )
            #if( $allowedOwners0 == $identityValue )
              #set( $isOwnerAuthorized = true )
            #end
          #end
          #if( $util.isNull($allowedOwners0) )
            #set( $isOwnerAuthorized = true )
          #end
          ## [End] Owner Authorization Checks **
          ## [Start] Throw if unauthorized **
          #if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true) )
            $util.unauthorized()
          #end
          ## [End] Throw if unauthorized **
        #else
          $util.unauthorized()
        #end
        ## [End] Check authMode and execute owner/group checks **
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "username": $utils.toJson($identityValue),
            "gameData": $utils.toJson($ctx.args.gameData),
            "latencies": $utils.toJson($ctx.args.latencies),
            "playerData": $utils.toJson($ctx.args.playerData)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #else
          $utils.toJson($ctx.result)
        #end
      TypeName: Mutation
  awsTutorialPrivateGameGraphQLMutationCreatePrivateGameResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt awsTutorialPrivateGameGraphQLApi.ApiId
      DataSourceName: !GetAtt awsTutorialCreatePrivateGameDataSource.Name
      FieldName: CreatePrivateGame
      Kind: UNIT
      RequestMappingTemplate: |
        ## [Start] Set default values. **
        #set( $createdAt = $util.time.nowEpochSeconds() )
        #set( $updatedAt = $util.time.nowEpochSeconds() )
        ## [End] Set default values. **
        ## [Start] Determine request authentication mode **
        #if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) && !$util.isNull($ctx.identity.defaultAuthStrategy) )
          #set( $authMode = "userPools" )
        #end
        ## [End] Determine request authentication mode **
        ## [Start] Check authMode and execute owner/group checks **
        #if( $authMode == "userPools" )
          ## No Static Group Authorization Rules **
          ## No Dynamic Group Authorization Rules **
          ## [Start] Owner Authorization Checks **
          #set( $isOwnerAuthorized = false )
          ## Authorization rule: { allow: owner, ownerField: None, identityClaim: "cognito:username" } **
          #set( $allowedOwners0 = $util.defaultIfNull(null, null) )
          #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get("username"), $util.defaultIfNull($ctx.identity.claims.get("cognito:username"), "___xamznone____")) )
          #if( $util.isString($allowedOwners0) )
            #if( $allowedOwners0 == $identityValue )
              #set( $isOwnerAuthorized = true )
            #end
          #end
          #if( $util.isNull($allowedOwners0) )
            #set( $isOwnerAuthorized = true )
          #end
          ## [End] Owner Authorization Checks **
          ## [Start] Throw if unauthorized **
          #if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true) )
            $util.unauthorized()
          #end
          ## [End] Throw if unauthorized **
        #else
          $util.unauthorized()
        #end
        ## [End] Check authMode and execute owner/group checks **
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "username": $utils.toJson($identityValue),
            "gameData": $utils.toJson($ctx.args.gameData),
            "playerData": $utils.toJson($ctx.args.playerData)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #else
          $utils.toJson($ctx.result)
        #end
      TypeName: Mutation
  awsTutorialPrivateGameGraphQLMutationJoinPrivateGameResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt awsTutorialPrivateGameGraphQLApi.ApiId
      DataSourceName: !GetAtt awsTutorialJoinPrivateGameDataSource.Name
      FieldName: JoinPrivateGame
      Kind: UNIT
      RequestMappingTemplate: |
        ## [Start] Set default values. **
        #set( $createdAt = $util.time.nowEpochSeconds() )
        #set( $updatedAt = $util.time.nowEpochSeconds() )
        ## [End] Set default values. **
        ## [Start] Determine request authentication mode **
        #if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) && !$util.isNull($ctx.identity.defaultAuthStrategy) )
          #set( $authMode = "userPools" )
        #end
        ## [End] Determine request authentication mode **
        ## [Start] Check authMode and execute owner/group checks **
        #if( $authMode == "userPools" )
          ## No Static Group Authorization Rules **
          ## No Dynamic Group Authorization Rules **
          ## [Start] Owner Authorization Checks **
          #set( $isOwnerAuthorized = false )
          ## Authorization rule: { allow: owner, ownerField: None, identityClaim: "cognito:username" } **
          #set( $allowedOwners0 = $util.defaultIfNull(null, null) )
          #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get("username"), $util.defaultIfNull($ctx.identity.claims.get("cognito:username"), "___xamznone____")) )
          #if( $util.isString($allowedOwners0) )
            #if( $allowedOwners0 == $identityValue )
              #set( $isOwnerAuthorized = true )
            #end
          #end
          #if( $util.isNull($allowedOwners0) )
            #set( $isOwnerAuthorized = true )
          #end
          ## [End] Owner Authorization Checks **
          ## [Start] Throw if unauthorized **
          #if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true) )
            $util.unauthorized()
          #end
          ## [End] Throw if unauthorized **
        #else
          $util.unauthorized()
        #end
        ## [End] Check authMode and execute owner/group checks **
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "username": $utils.toJson($identityValue),
            "password": $utils.toJson($ctx.args.password),
            "playerData": $utils.toJson($ctx.args.playerData)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #else
          $utils.toJson($ctx.result)
        #end
      TypeName: Mutation
Outputs:
  awsTutorialPrivateGameGraphQLHost:
    Description: GraphQL Host
    Value: !GetAtt awsTutorialPrivateGameGraphQLApi.GraphQLDns
    Export:
      Name: !Sub 'awsTutorialPrivateGameGraphQLHost'
  awsTutorialPrivateGameGraphQLEndpoint:
    Description: GraphQL Endpoint
    Value: !GetAtt awsTutorialPrivateGameGraphQLApi.GraphQLUrl
    Export:
      Name: !Sub 'awsTutorialPrivateGameGraphQLEndpoint'