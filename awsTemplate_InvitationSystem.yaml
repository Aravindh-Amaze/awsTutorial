AWSTemplateFormatVersion: '2010-09-09'

Description: awsTutorial(Invitation System part)
Parameters:
  ResourceNamePrefix:
    Description: Prefix of resource name
    Default: awstutorial
    Type: String
  CognitoUserPool:
    Description: Cognito User Pool id of the cognito user pool client which provide
      authentication for graphql api
    Type: String
  CognitoUserPoolArn:
    Description: Cognito User Pool id of the cognito user pool client which provide
      authentication for graphql api
    Type: String
  CognitoUserPoolClient:
    Description: Cognito User Pool client id of the cognito user pool client which
      provide authentication for graphql api
    Type: String
Resources:
  awsTutorialInvitationGraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - Invitation_GraphQL_API
      ApiType: GRAPHQL
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      IntrospectionConfig: ENABLED
      UserPoolConfig:
        AppIdClientRegex: !Ref CognitoUserPoolClient
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW
        UserPoolId: !Ref CognitoUserPool
      Tags:
        - Key: Usage
          Value: Youtube Streamer
      Visibility: GLOBAL
  awsTutorialInvitationNoneDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _Invitation_None_DataSource
      ApiId: !GetAtt awsTutorialInvitationGraphQLApi.ApiId
      Description: Data source for subscriptions
      Type: NONE
  awsTutorialInvitationGraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt awsTutorialInvitationGraphQLApi.ApiId
      Definition: |
        schema @aws_cognito_user_pools {
          query: Query
          mutation: Mutation
          subscription: Subscription
        }
        type Invitation @aws_cognito_user_pools {
          fromUser: String!
          toUser: String!
          invitationStatus: String!
          roomId: String!
          createdAt: Int
          updatedAt: Int
        }
        type Query @aws_cognito_user_pools {
        }
        type Mutation @aws_cognito_user_pools {
          sendInvitation(toUser: String!, roomId: String!): Invitation
        }
        type Subscription @aws_cognito_user_pools {
          invitationSent: Invitation @aws_subscribe(mutations: ["sendInvitation"])
        }
  awsTutorialInvitationGraphQLMutationSendInvitationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt awsTutorialInvitationGraphQLApi.ApiId
      DataSourceName: !GetAtt awsTutorialInvitationNoneDataSource.Name
      FieldName: sendInvitation
      Kind: UNIT
      RequestMappingTemplate: |
        ## [Start] Set default values. **
        #set( $createdAt = $util.time.nowEpochSeconds() )
        #set( $updatedAt = $util.time.nowEpochSeconds() )
        ## [End] Set default values. **
        ## [Start] Determine request authentication mode **
        #if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) && !$util.isNull($ctx.identity.defaultAuthStrategy) )
          #set( $authMode = "userPools" )
        #end
        ## [End] Determine request authentication mode **
        ## [Start] Check authMode and execute owner/group checks **
        #if( $authMode == "userPools" )
          ## No Static Group Authorization Rules **
          ## No Dynamic Group Authorization Rules **
          ## [Start] Owner Authorization Checks **
          #set( $isOwnerAuthorized = false )
          ## Authorization rule: { allow: owner, ownerField: "player", identityClaim: "cognito:username" } **
          #set( $allowedOwners0 = $util.defaultIfNull($ctx.args.player, null) )
          #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get("username"), $util.defaultIfNull($ctx.identity.claims.get("cognito:username"), "___xamznone____")) )
          #if( $util.isString($allowedOwners0) )
            #if( $allowedOwners0 == $identityValue )
              #set( $isOwnerAuthorized = true )
            #end
          #end
          #if( $util.isNull($allowedOwners0) && (! $ctx.args.containsKey("player")) )
            #set( $isOwnerAuthorized = true )
          #end
          ## [End] Owner Authorization Checks **
          ## [Start] Throw if unauthorized **
          #if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true) )
            $util.unauthorized()
          #end
          ## [End] Throw if unauthorized **
        #else
          $util.unauthorized()
        #end
        ## [End] Check authMode and execute owner/group checks **
        #if( $identityValue == $ctx.args.fromUser )
          $util.error("You are rejecting a friend request to yourself", "InvalidParameter")
        #end
        ## @TODO: make sure the friend request exists and the status is sent.
        {
          "version": "2018-05-29",
          "payload": {
            "fromUser": $utils.toJson($identityValue),
            "toUser": $utils.toJson($ctx.args.toUser),
            "invitationStatus": "sent",
            "roomId": $utils.toJson($ctx.args.roomId),
            "createdAt": $utils.toJson($createdAt),
            "updatedAt": $utils.toJson($updatedAt)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #else
          $utils.toJson($ctx.result)
        #end
      TypeName: Mutation
  awsTutorialInvitationGraphQLSubscriptionInvitationSentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt awsTutorialInvitationGraphQLApi.ApiId
      DataSourceName: !GetAtt awsTutorialInvitationNoneDataSource.Name
      FieldName: invitationSent
      Kind: UNIT
      RequestMappingTemplate: |
        ## [Start] Set default values. **
        #set( $updatedAt = $util.time.nowEpochSeconds() )
        ## [End] Set default values. **
        ## [Start] Determine request authentication mode **
        #if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) && !$util.isNull($ctx.identity.defaultAuthStrategy) )
          #set( $authMode = "userPools" )
        #end
        ## [End] Determine request authentication mode **
        ## [Start] Check authMode and execute owner/group checks **
        #if( $authMode == "userPools" )
          ## No Static Group Authorization Rules **
          ## No Dynamic Group Authorization Rules **
          ## [Start] Owner Authorization Checks **
          #set( $isOwnerAuthorized = false )
          ## Authorization rule: { allow: owner, ownerField: "player", identityClaim: "cognito:username" } **
          #set( $allowedOwners0 = $util.defaultIfNull($ctx.args.player, null) )
          #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get("username"), $util.defaultIfNull($ctx.identity.claims.get("cognito:username"), "___xamznone____")) )
          #if( $util.isString($allowedOwners0) )
            #if( $allowedOwners0 == $identityValue )
              #set( $isOwnerAuthorized = true )
            #end
          #end
          #if( $util.isNull($allowedOwners0) && (! $ctx.args.containsKey("player")) )
            #set( $isOwnerAuthorized = true )
          #end
          ## [End] Owner Authorization Checks **
          ## [Start] Throw if unauthorized **
          #if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true) )
            $util.unauthorized()
          #end
          ## [End] Throw if unauthorized **
        #else
          $util.unauthorized()
        #end
        #set($ctx.stash.identityValue = $identityValue)
        ## [End] Check authMode and execute owner/group checks **
        ## @TODO: make sure the friend request exists and the status is sent.
        {
          "version": "2018-05-29",
          "payload": null
        }
      ResponseMappingTemplate: |
        $extensions.setSubscriptionFilter({
          "filterGroup": [
            {
              "filters": [
                {
                  "fieldName": "toUser",
                  "operator": "eq",
                  "value": $utils.toJson($ctx.stash.identityValue)
                }
              ]
            }
          ]
        })
        $util.toJson($ctx.result)
      TypeName: Subscription
Outputs:
  awsTutorialInvitationSystemGraphQLHost:
    Description: GraphQL Host
    Value: !GetAtt awsTutorialInvitationGraphQLApi.GraphQLDns
    Export:
      Name: !Sub 'awsTutorialInvitationSystemGraphQLHost'
  awsTutorialInvitationSystemGraphQLEndpoint:
    Description: GraphQL Endpoint
    Value: !GetAtt awsTutorialInvitationGraphQLApi.GraphQLUrl
    Export:
      Name: !Sub 'awsTutorialInvitationSystemGraphQLEndpoint'
  awsTutorialInvitationSystemGraphQLRealtimeEndpoint:
    Description: GraphQL realtime Endpoint
    Value: !GetAtt awsTutorialInvitationGraphQLApi.RealtimeUrl
    Export:
      Name: !Sub 'awsTutorialInvitationSystemGraphQLRealtimeEndpoint'