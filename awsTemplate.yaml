AWSTemplateFormatVersion: '2010-09-09'

Description: awsTutorial(2, Cognito Basic)
Parameters:
  ResourceNamePrefix:
    Description: Prefix of resource name
    Default: awstutorial
    Type: String
  GameServerBuildBucket:
    Description: S3 bucket for storing game server build files.
    Type: String
  GameServerBuildKey:
    Description: The key of the game server build file.
    Type: String
  GameServerBuildObjectVersion:
    Description: The version of the game server build file.
    Type: String
  GameServerBuildServerSdkVersion:
    Description: The server sdk version of the game server build file.
    Type: String
  GameServerBuildVersion:
    Description: Version of the game server build.
    Type: String
  GameServerLaunchPath:
    Description: The launch path of the game server.
    Type: String
Resources:
  awsTutorialLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _UserLogs
      LogGroupClass: INFREQUENT_ACCESS
      RetentionInDays: 7
      Tags:
        - Key: Usage
          Value: Youtube Streamer
  awsTutorialUserGeneratedContentS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - '-user-generated-content-bucket'
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Usage
          Value: Youtube Streamer
  awsTutorialCognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _Cognito_Auth_Role
      Description: Role for AWS Cognito Identity Auth
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
              - sts:TagSession
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref awsTutorialCognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: !Join
            - ''
            - - !Ref ResourceNamePrefix
              - _Cognito_Auth_Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: GameLiftBasic
                Effect: Allow
                Action:
                  - gamelift:SearchGameSessions
                  - gamelift:CreateGameSession
                  - gamelift:CreatePlayerSession
                Resource: '*'
              - Sid: UserGeneratedContent
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:PutObjectTagging
                Resource: !Join
                  - ''
                  - - !GetAtt awsTutorialUserGeneratedContentS3Bucket.Arn
                    - /${cognito-identity.amazonaws.com:sub}/*
              - Sid: UserLogs
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - !Ref AWS::Region
                    - ':'
                    - !Ref AWS::AccountId
                    - ':log-group:'
                    - !Ref awsTutorialLogGroup
                    - ':log-stream:*'
      Tags:
        - Key: Usage
          Value: Youtube Streamer
  awsTutorialCognitoUnauthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _Cognito_Unauth_Role
      Description: Role for AWS Cognito Identity Unauth
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
              - sts:TagSession
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref awsTutorialCognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
        - PolicyName: !Join
            - ''
            - - !Ref ResourceNamePrefix
              - _Cognito_Unauth_Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: DenyAll
                Effect: Deny
                Action: '*'
                Resource: '*'
      Tags:
        - Key: Usage
          Value: Youtube Streamer
  awsTutorialUserGeneratedContentS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref awsTutorialUserGeneratedContentS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowUserUpload
            Effect: Allow
            Principal:
              AWS: !GetAtt awsTutorialCognitoAuthRole.Arn
            Action:
              - s3:PutObject
            Resource: !Join
              - ''
              - - !GetAtt awsTutorialUserGeneratedContentS3Bucket.Arn
                - /${cognito-identity.amazonaws.com:sub}/*
          - Sid: AllowGet
            Effect: Allow
            Principal:
              AWS: !GetAtt awsTutorialCognitoAuthRole.Arn
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !Join
              - ''
              - - !GetAtt awsTutorialUserGeneratedContentS3Bucket.Arn
                - /${cognito-identity.amazonaws.com:sub}/*
          - Sid: AllowGetPublic
            Effect: Allow
            Principal:
              AWS: !GetAtt awsTutorialCognitoAuthRole.Arn
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !Join
              - ''
              - - !GetAtt awsTutorialUserGeneratedContentS3Bucket.Arn
                - /*
            Condition:
              StringEquals:
                s3:ExistingObjectTag/public: 'true'
          - Sid: AllowTag
            Effect: Allow
            Principal:
              AWS: !GetAtt awsTutorialCognitoAuthRole.Arn
            Action:
              - s3:PutObjectTagging
            Resource: !Join
              - ''
              - - !GetAtt awsTutorialUserGeneratedContentS3Bucket.Arn
                - /${cognito-identity.amazonaws.com:sub}/*
  awsTutorialCognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _Cognito_Identity_Pool
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref awsTutorialCognitoUserPoolClient
          ProviderName: !GetAtt awsTutorialCognitoUserPool.ProviderName
          ServerSideTokenCheck: true
  awsTutorialCognitoIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref awsTutorialCognitoIdentityPool
      Roles:
        unauthenticated: !GetAtt awsTutorialCognitoUnauthRole.Arn
        authenticated: !GetAtt awsTutorialCognitoAuthRole.Arn
  awsTutorialCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _Cognito_User_Pool
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
        - email
        - preferred_username
      AutoVerifiedAttributes:
        - email
      DeletionProtection: INACTIVE
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      MfaConfiguration: OPTIONAL
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: avatar
          AttributeDataType: String
          Mutable: true
          Required: false
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
      UsernameConfiguration:
        CaseSensitive: true
      UserPoolAddOns:
        AdvancedSecurityMode: 'OFF'
      UserPoolTags:
        Usage: Youtube Streamer
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
  awsTutorialCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _Cognito_User_Pool_Client
      AccessTokenValidity: 60
      IdTokenValidity: 60
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthFlowsUserPoolClient: false
      AuthSessionValidity: 3
      EnablePropagateAdditionalUserContextData: false
      EnableTokenRevocation: true
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: true
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
      ReadAttributes:
        - preferred_username
        - email
        - email_verified
        - custom:avatar
      WriteAttributes:
        - email
        - preferred_username
        - custom:avatar
      UserPoolId: !Ref awsTutorialCognitoUserPool
  awsTutorialGameLiftRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _GameLift_Role
      Description: Role for AWS GameLift service
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - gamelift.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Join
            - ''
            - - !Ref ResourceNamePrefix
              - _GameLift_Policy
          PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Effect: Allow
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref GameServerBuildBucket
                    - /*
      Tags:
        - Key: Usage
          Value: Youtube Streamer
  awsTutorialBuild:
    Type: AWS::GameLift::Build
    Properties:
      Name: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _Build
      OperatingSystem: AMAZON_LINUX_2
      ServerSdkVersion: !Ref GameServerBuildServerSdkVersion
      StorageLocation:
        Bucket: !Ref GameServerBuildBucket
        Key: !Ref GameServerBuildKey
        ObjectVersion: !Ref GameServerBuildObjectVersion
        RoleArn: !GetAtt awsTutorialGameLiftRole.Arn
      Version: !Ref GameServerBuildVersion
  awsTutorialFleet:
    Type: AWS::GameLift::Fleet
    Properties:
      Name: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _Fleet
      Description: awsTutorial Fleet
      BuildId: !Ref awsTutorialBuild
      CertificateConfiguration:
        CertificateType: GENERATED
      ComputeType: EC2
      DesiredEC2Instances: 1
      EC2InboundPermissions:
        - FromPort: 7777
          ToPort: 7777
          IpRange: 0.0.0.0/0
          Protocol: UDP
      EC2InstanceType: c6g.medium
      FleetType: SPOT
      MaxSize: 1
      MinSize: 0
      NewGameSessionProtectionPolicy: NoProtection
      ResourceCreationLimitPolicy:
        NewGameSessionsPerCreator: 1
        PolicyPeriodInMinutes: 3
      RuntimeConfiguration:
        GameSessionActivationTimeoutSeconds: 300
        MaxConcurrentGameSessionActivations: 1
        ServerProcesses:
          - ConcurrentExecutions: 1
            LaunchPath: !Join
              - ''
              - - /local/game/
                - !Ref GameServerLaunchPath
  awsTutorialAlias:
    Type: AWS::GameLift::Alias
    Properties:
      Name: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _Alias
      Description: awsTutorial Alias
      RoutingStrategy:
        FleetId: !Ref awsTutorialFleet
        Type: SIMPLE
  awsTutorialSearchUsersLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _SearchUsers_Lambda_Function_Role
      Description: Role for AWS Lambda Functions Cognito User Pool
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Join
            - ''
            - - !Ref ResourceNamePrefix
              - _SearchUsers_Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: SearchUsersPolicy
                Effect: Allow
                Action:
                  - cognito-idp:ListUsers
                Resource:
                  - !GetAtt awsTutorialCognitoUserPool.Arn
      Tags:
        - Key: Usage
          Value: Youtube Streamer
  awsTutorialSearchUsersLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _SearchUsers_Lambda
      Description: Lambda function Search Users for Cognito user pool
      Code:
        ZipFile: |
          import os
          import boto3
          def lambda_handler(event, context):
              UserPool = os.environ['User_Pool']
              cognito_idp = boto3.client('cognito-idp')
              request_parameters = {
                'UserPoolId': UserPool,
                'Limit': 20
              }
              if event['hint']:
                filter_expression = f"username ^= '{event['hint']}' OR preferred_username ^= '{event['hint']}' OR email ^= '{event['hint']}'"
                request_parameters['Filter'] = filter_expression
              if event['nextToken']:
                request_parameters['PaginationToken'] = event['nextToken']
              try:
                response = cognito_idp.list_users(**request_parameters)
                output = {
                  'users': [user['Username'] for user in response['Users']],
                }
                if 'PaginationToken' in response:
                  output['nextToken'] = response['PaginationToken']
                return output
              except Exception as e:
                raise Exception(f"Error processing request: {str(e)}")
      Environment:
        Variables:
          User_Pool: !Ref awsTutorialCognitoUserPool
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt awsTutorialSearchUsersLambdaRole.Arn
      Runtime: python3.12
      Timeout: 30
      Tags:
        - Key: Usage
          Value: Youtube Streamer
  awsTutorialFriendListDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join
        - !Ref ResourceNamePrefix
          - _FriendList_DynamoDB_Table
      AttributeDefinitions:
        - AttributeName: toUser
          AttributeType: S
        - AttributeName: fromUser
          AttributeType: S
        - AttributeName: friendStatus
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: false
      OnDemandThroughput:
        MaxReadRequestUnits: 1
        MaxWriteRequestUnits: 1
      TableClass: STANDARD
      KeySchema:
        - AttributeName: toUser
          KeyType: HASH
        - AttributeName: fromUser
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: byFromUser
          KeySchema:
            - AttributeName: fromUser
              KeyType: HASH
            - AttributeName: friendStatus
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          OnDemandThroughput:
            MaxReadRequestUnits: 1
            MaxWriteRequestUnits: 1
        - IndexName: byToUser
          KeySchema:
            - AttributeName: toUser
              KeyType: HASH
            - AttributeName: friendStatus
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          OnDemandThroughput:
            MaxReadRequestUnits: 1
            MaxWriteRequestUnits: 1
      Tags:
        - Key: Usage
          Value: Youtube Streamer
# add DAX if you want but it will charge you per hours. Only add it when you are at the corner of releasing your game.
  awsTutorialFriendListLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _FriendList_Lambda_Function_Role
      Description: Role for AWS Lambda Functions Friend List Table
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Join
            - ''
            - - !Ref ResourceNamePrefix
              - _FriendList_Lambda_Function_Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: FriendListLambdaFunctionPolicy
                Effect: Allow
                Action:
                  - dynamodb:PartiQLSelect
                Resource:
                  - !GetAtt awsTutorialFriendListDynamoDBTable.Arn
                  - !Join
                    - ''
                    - - !GetAtt awsTutorialFriendListDynamoDBTable.Arn
                      - /*
      Tags:
        - Key: Usage
          Value: Youtube Streamer
  awsTutorialGetFriendStatusLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - ''
        - - !Ref ResourceNamePrefix
          - _GetFriendStatus_Lambda
      Description: Lambda function List Pending Friend Requests for FriendList table
      Code:
        ZipFile: |
          import os
          import boto3
          def lambda_handler(event, context):
              friendListTableName = os.environ['TABLE_NAME']
              dynamodb = boto3.client('dynamodb')
              statement = 'select * from {0} where (ToUser = ? and FromUser = ?) or (ToUser = ? and FromUser = ?)'.format(friendListTableName)
              request_parameters = {
                'Statement': statement,
                'Parameters': [{
                  "S": event['username'],
                },{
                  "S": event['user'],
                },{
                  "S": event['user'],
                },{
                  "S": event['username'],
                }],
                'Limit': 20
              }
              try:
                response = dynamodb.execute_statement(**request_parameters)
                if response['Items']:
                  output = {
                    'toUser': response['Items'][0]['toUser']['S'],
                    'fromUser': response['Items'][0]['fromUser']['S'],
                    'friendStatus': response['Items'][0]['friendStatus']['S'],
                    'createdAt': response['Items'][0]['createdAt']['N'],
                    'updatedAt': response['Items'][0]['updatedAt']['N'],
                  }
                else:
                  output = {
                    'toUser': event['user'],
                    'fromUser': event['username'],
                    'friendStatus': 'none or rejected',
                  }
                return output
              except Exception as e:
                raise Exception(f"Error processing request: {str(e)}")
      Environment:
        Variables:
          TABLE_NAME: !Ref awsTutorialFriendListDynamoDBTable
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt awsTutorialFriendListLambdaFunctionRole.Arn
      Runtime: python3.12
      Timeout: 30
      Tags:
        - Key: Usage
          Value: Youtube Streamer
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: Cognito
      Members:
        - awsTutorialCognitoIdentityPool
        - awsTutorialCognitoUserPool
        - awsTutorialCognitoUserPoolClient
    Group2:
      Label: GameLift
      Members:
        - awsTutorialGameLiftRole
        - awsTutorialFleet
        - awsTutorialAlias
    Group3:
      Label: User Generated Content
      Members:
        - awsTutorialUserGeneratedContentS3Bucket
    Group4:
      Label: Logs
      Members:
        - awsTutorialLogGroup
Outputs:
  awsTutorialRegion:
    Description: AWS Region
    Value: !Ref AWS::Region
  awsTutorialCognitoIdentityPoolId:
    Description: Cognito Identity Pool ID
    Value: !Ref awsTutorialCognitoIdentityPool
  awsTutorialCognitoUserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref awsTutorialCognitoUserPool
  awsTutorialCognitoUserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref awsTutorialCognitoUserPoolClient
  awsTutorialAliasId:
    Description: GameLift Alias ID
    Value: !Ref awsTutorialAlias
  awsTutorialUserGeneratedContentS3Bucket:
    Description: User Generated Content S3 Bucket
    Value: !Ref awsTutorialUserGeneratedContentS3Bucket
  awsTutorialLogGroupName:
    Description: Log Group Name
    Value: !Ref awsTutorialLogGroup